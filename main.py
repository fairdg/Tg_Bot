from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
import asyncio
from datetime import datetime, timedelta
import re
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message
from dotenv import load_dotenv
import os
import logging


load_dotenv()

bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],  
    ],
    resize_keyboard=True  
)


tasks = {}  # –§–æ—Ä–º–∞—Ç: {id: {"text": str, "deadline": datetime, "created_at": datetime}}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
‚úÖ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞—á–∞—Ö –∑–∞—Ä–∞–Ω–µ–µ
üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
‚ùå –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏

–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/add [–∑–∞–¥–∞—á–∞] [–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º] [–º–∏–Ω—É—Ç—ã –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
/tasks ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/delete [id] ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/completed [id] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/help ‚Äî –ø–æ–º–æ—â—å

–ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ 25.10.2023 18:00 30
"""
    await message.answer(welcome_text, reply_markup=keyboard)
    
@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def handle_tasks_button(message: Message):
    
    await list_tasks(message)

@dp.message(Command("add"))
async def add_task(message: types.Message):
    try:
        command_content = message.text.removeprefix("/add ").strip()
        match = re.search(r"(.+?) (\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})(?: (\d+))?$", command_content)
        
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        task_text, deadline_str, reminder_minutes = match.groups()

        deadline = datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")

        reminder_time = None
        if reminder_minutes:
            reminder_minutes = int(reminder_minutes)
            reminder_time = deadline - timedelta(minutes=reminder_minutes)

        task_id = len(tasks) + 1
        tasks[task_id] = {
            "text": task_text,
            "deadline": deadline,
            "created_at": datetime.now(),
            "user_id": message.from_user.id,
            "reminder_time": reminder_time,
            "completed": False,
        }

        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {tasks[task_id]}")

        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}\nüïí –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}"
            + (f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {reminder_minutes} –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞" if reminder_minutes else "")
        )
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add [–∑–∞–¥–∞—á–∞] [–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º] [–º–∏–Ω—É—Ç—ã –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]"
        )




@dp.message(Command("tasks"))
async def list_tasks(message: types.Message):
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üòû")
        return

    task_list = []
    now = datetime.now()
    for task_id, task in tasks.items():
        if task["user_id"] == message.from_user.id:
            if task.get("completed", False):
                status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            else: 
                status = (
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {str(task['deadline'] - now)}"
                    if task["deadline"] > now
                    else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                )
            task_list.append(
                f"{task_id}. {task['text']}\n   üïí –î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%d.%m.%Y %H:%M')}\n   –°—Ç–∞—Ç—É—Å: {status}"
            )
    await message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + "\n\n".join(task_list))

@dp.message(Command("completed"))
async def completed_task(message: types.Message):
    try:
        task_id = int(message.text.split(" ")[1])  
        if task_id in tasks:
            if tasks[task_id]["user_id"] == message.from_user.id:
                tasks[task_id]["completed"] = True
                await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            else:
                await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—É–∂—É—é –∑–∞–¥–∞—á—É.")
        else:
            await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /completed [id]")
    
    


@dp.message(Command("delete"))
async def delete_task(message: types.Message):
    try:
        task_id = int(message.text.split(" ")[1])  
        if task_id in tasks:
            del tasks[task_id]
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete [id]")


@dp.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = """
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/add [–∑–∞–¥–∞—á–∞] [–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º] [–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ X –º–∏–Ω—É—Ç]  
_–ü—Ä–∏–º–µ—Ä:_ `/add –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ 25.12.2023 18:00 30`

/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á  
/delete [ID] ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É  
/completed [ID] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é  
    """
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)
    
logging.basicConfig(level=logging.INFO)

async def reminder_check():
    while True:
        now = datetime.now()
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –≤ {now}")
        if not tasks:
            logging.info("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            for task_id, task in list(tasks.items()):
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ {task_id}: {task}")
                logging.info(f"–î–µ–¥–ª–∞–π–Ω: {task['deadline']}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task.get('reminder_time')}, –°–µ–π—á–∞—Å: {now}")
                if task["user_id"] and not task.get("completed", False):
                    if task["deadline"] and task["deadline"] <= now:
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                        await bot.send_message(
                            task["user_id"], f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ: {task['text']}"
                        )
                        del tasks[task_id]
                    
                    elif task.get("reminder_time") and task["reminder_time"] <= now:
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                        await bot.send_message(
                            task["user_id"], f"‚è≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: {task['text']}\n–î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%d.%m.%Y %H:%M')}"
                        )
                        task["reminder_time"] = None
        
        await asyncio.sleep(10)
    



async def on_startup(dispatcher):
    asyncio.create_task(reminder_check())

if __name__ == "__main__":
    dp.run_polling(bot, on_startup=on_startup)
